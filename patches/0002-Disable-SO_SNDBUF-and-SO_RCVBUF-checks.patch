From c51eabca7010ac4755029515c248b6830960da12 Mon Sep 17 00:00:00 2001
From: Alexander Jung <a.jung@lancs.ac.uk>
Date: Mon, 4 Jan 2021 01:19:15 +0100
Subject: [PATCH] Disable SO_SNDBUF and SO_RCVBUF checks

This commit removes iperf3's check for the sender's socket buffer
size as the getsockopt option is currently unimplemented by
LwIP.

Signed-off-by: Alexander Jung <a.jung@lancs.ac.uk>
---
 src/iperf_tcp.c | 132 ++++++++++++++++++++++++------------------------
 src/iperf_udp.c |  84 +++++++++++++++---------------
 2 files changed, 108 insertions(+), 108 deletions(-)

diff --git a/src/iperf_tcp.c b/src/iperf_tcp.c
index 47252d0..5a0aa12 100644
--- a/src/iperf_tcp.c
+++ b/src/iperf_tcp.c
@@ -312,43 +312,43 @@ iperf_tcp_listen(struct iperf_test *test)
     }
     
     /* Read back and verify the sender socket buffer size */
-    optlen = sizeof(sndbuf_actual);
-    if (getsockopt(s, SOL_SOCKET, SO_SNDBUF, &sndbuf_actual, &optlen) < 0) {
-	saved_errno = errno;
-	close(s);
-	errno = saved_errno;
-	i_errno = IESETBUF;
-	return -1;
-    }
-    if (test->debug) {
-	printf("SNDBUF is %u, expecting %u\n", sndbuf_actual, test->settings->socket_bufsize);
-    }
-    if (test->settings->socket_bufsize && test->settings->socket_bufsize > sndbuf_actual) {
-	i_errno = IESETBUF2;
-	return -1;
-    }
+    // optlen = sizeof(sndbuf_actual);
+    // if (getsockopt(s, SOL_SOCKET, SO_SNDBUF, &sndbuf_actual, &optlen) < 0) {
+	// saved_errno = errno;
+	// close(s);
+	// errno = saved_errno;
+	// i_errno = IESETBUF;
+	// return -1;
+    // }
+    // if (test->debug) {
+	// printf("SNDBUF is %u, expecting %u\n", sndbuf_actual, test->settings->socket_bufsize);
+    // }
+    // if (test->settings->socket_bufsize && test->settings->socket_bufsize > sndbuf_actual) {
+	// i_errno = IESETBUF2;
+	// return -1;
+    // }
 
     /* Read back and verify the receiver socket buffer size */
-    optlen = sizeof(rcvbuf_actual);
-    if (getsockopt(s, SOL_SOCKET, SO_RCVBUF, &rcvbuf_actual, &optlen) < 0) {
-	saved_errno = errno;
-	close(s);
-	errno = saved_errno;
-	i_errno = IESETBUF;
-	return -1;
-    }
-    if (test->debug) {
-	printf("RCVBUF is %u, expecting %u\n", rcvbuf_actual, test->settings->socket_bufsize);
-    }
-    if (test->settings->socket_bufsize && test->settings->socket_bufsize > rcvbuf_actual) {
-	i_errno = IESETBUF2;
-	return -1;
-    }
+    // optlen = sizeof(rcvbuf_actual);
+    // if (getsockopt(s, SOL_SOCKET, SO_RCVBUF, &rcvbuf_actual, &optlen) < 0) {
+	// saved_errno = errno;
+	// close(s);
+	// errno = saved_errno;
+	// i_errno = IESETBUF;
+	// return -1;
+    // }
+    // if (test->debug) {
+	// printf("RCVBUF is %u, expecting %u\n", rcvbuf_actual, test->settings->socket_bufsize);
+    // }
+    // if (test->settings->socket_bufsize && test->settings->socket_bufsize > rcvbuf_actual) {
+	// i_errno = IESETBUF2;
+	// return -1;
+    // }
 
     if (test->json_output) {
 	cJSON_AddNumberToObject(test->json_start, "sock_bufsize", test->settings->socket_bufsize);
-	cJSON_AddNumberToObject(test->json_start, "sndbuf_actual", sndbuf_actual);
-	cJSON_AddNumberToObject(test->json_start, "rcvbuf_actual", rcvbuf_actual);
+	// cJSON_AddNumberToObject(test->json_start, "sndbuf_actual", sndbuf_actual);
+	// cJSON_AddNumberToObject(test->json_start, "rcvbuf_actual", rcvbuf_actual);
     }
 
     return s;
@@ -504,45 +504,45 @@ iperf_tcp_connect(struct iperf_test *test)
     }
 
     /* Read back and verify the sender socket buffer size */
-    optlen = sizeof(sndbuf_actual);
-    if (getsockopt(s, SOL_SOCKET, SO_SNDBUF, &sndbuf_actual, &optlen) < 0) {
-	saved_errno = errno;
-	close(s);
-	freeaddrinfo(server_res);
-	errno = saved_errno;
-	i_errno = IESETBUF;
-	return -1;
-    }
-    if (test->debug) {
-	printf("SNDBUF is %u, expecting %u\n", sndbuf_actual, test->settings->socket_bufsize);
-    }
-    if (test->settings->socket_bufsize && test->settings->socket_bufsize > sndbuf_actual) {
-	i_errno = IESETBUF2;
-	return -1;
-    }
+    // optlen = sizeof(sndbuf_actual);
+    // if (getsockopt(s, SOL_SOCKET, SO_SNDBUF, &sndbuf_actual, &optlen) < 0) {
+	// saved_errno = errno;
+	// close(s);
+	// freeaddrinfo(server_res);
+	// errno = saved_errno;
+	// i_errno = IESETBUF;
+	// return -1;
+    // }
+    // if (test->debug) {
+	// printf("SNDBUF is %u, expecting %u\n", sndbuf_actual, test->settings->socket_bufsize);
+    // }
+    // if (test->settings->socket_bufsize && test->settings->socket_bufsize > sndbuf_actual) {
+	// i_errno = IESETBUF2;
+	// return -1;
+    // }
 
     /* Read back and verify the receiver socket buffer size */
-    optlen = sizeof(rcvbuf_actual);
-    if (getsockopt(s, SOL_SOCKET, SO_RCVBUF, &rcvbuf_actual, &optlen) < 0) {
-	saved_errno = errno;
-	close(s);
-	freeaddrinfo(server_res);
-	errno = saved_errno;
-	i_errno = IESETBUF;
-	return -1;
-    }
-    if (test->debug) {
-	printf("RCVBUF is %u, expecting %u\n", rcvbuf_actual, test->settings->socket_bufsize);
-    }
-    if (test->settings->socket_bufsize && test->settings->socket_bufsize > rcvbuf_actual) {
-	i_errno = IESETBUF2;
-	return -1;
-    }
+    // optlen = sizeof(rcvbuf_actual);
+    // if (getsockopt(s, SOL_SOCKET, SO_RCVBUF, &rcvbuf_actual, &optlen) < 0) {
+	// saved_errno = errno;
+	// close(s);
+	// freeaddrinfo(server_res);
+	// errno = saved_errno;
+	// i_errno = IESETBUF;
+	// return -1;
+    // }
+    // if (test->debug) {
+	// printf("RCVBUF is %u, expecting %u\n", rcvbuf_actual, test->settings->socket_bufsize);
+    // }
+    // if (test->settings->socket_bufsize && test->settings->socket_bufsize > rcvbuf_actual) {
+	// i_errno = IESETBUF2;
+	// return -1;
+    // }
 
     if (test->json_output) {
 	cJSON_AddNumberToObject(test->json_start, "sock_bufsize", test->settings->socket_bufsize);
-	cJSON_AddNumberToObject(test->json_start, "sndbuf_actual", sndbuf_actual);
-	cJSON_AddNumberToObject(test->json_start, "rcvbuf_actual", rcvbuf_actual);
+	// cJSON_AddNumberToObject(test->json_start, "sndbuf_actual", sndbuf_actual);
+	// cJSON_AddNumberToObject(test->json_start, "rcvbuf_actual", rcvbuf_actual);
     }
 
 #if defined(HAVE_FLOWLABEL)
diff --git a/src/iperf_udp.c b/src/iperf_udp.c
index 2fd7bf5..883a047 100644
--- a/src/iperf_udp.c
+++ b/src/iperf_udp.c
@@ -304,53 +304,53 @@ iperf_udp_buffercheck(struct iperf_test *test, int s)
     }
 
     /* Read back and verify the sender socket buffer size */
-    optlen = sizeof(sndbuf_actual);
-    if (getsockopt(s, SOL_SOCKET, SO_SNDBUF, &sndbuf_actual, &optlen) < 0) {
-	i_errno = IESETBUF;
-	return -1;
-    }
-    if (test->debug) {
-	printf("SNDBUF is %u, expecting %u\n", sndbuf_actual, test->settings->socket_bufsize);
-    }
-    if (test->settings->socket_bufsize && test->settings->socket_bufsize > sndbuf_actual) {
-	i_errno = IESETBUF2;
-	return -1;
-    }
-    if (test->settings->blksize > sndbuf_actual) {
-	char str[80];
-	snprintf(str, sizeof(str),
-		 "Block size %d > sending socket buffer size %d",
-		 test->settings->blksize, sndbuf_actual);
-	warning(str);
-	rc = 1;
-    }
+  //   optlen = sizeof(sndbuf_actual);
+  //   if (getsockopt(s, SOL_SOCKET, SO_SNDBUF, &sndbuf_actual, &optlen) < 0) {
+	// i_errno = IESETBUF;
+	// return -1;
+  //   }
+  //   if (test->debug) {
+	// printf("SNDBUF is %u, expecting %u\n", sndbuf_actual, test->settings->socket_bufsize);
+  //   }
+  //   if (test->settings->socket_bufsize && test->settings->socket_bufsize > sndbuf_actual) {
+	// i_errno = IESETBUF2;
+	// return -1;
+  //   }
+  //   if (test->settings->blksize > sndbuf_actual) {
+	// char str[80];
+	// snprintf(str, sizeof(str),
+	// 	 "Block size %d > sending socket buffer size %d",
+	// 	 test->settings->blksize, sndbuf_actual);
+	// warning(str);
+	// rc = 1;
+  //   }
 
     /* Read back and verify the receiver socket buffer size */
-    optlen = sizeof(rcvbuf_actual);
-    if (getsockopt(s, SOL_SOCKET, SO_RCVBUF, &rcvbuf_actual, &optlen) < 0) {
-	i_errno = IESETBUF;
-	return -1;
-    }
-    if (test->debug) {
-	printf("RCVBUF is %u, expecting %u\n", rcvbuf_actual, test->settings->socket_bufsize);
-    }
-    if (test->settings->socket_bufsize && test->settings->socket_bufsize > rcvbuf_actual) {
-	i_errno = IESETBUF2;
-	return -1;
-    }
-    if (test->settings->blksize > rcvbuf_actual) {
-	char str[80];
-	snprintf(str, sizeof(str),
-		 "Block size %d > receiving socket buffer size %d",
-		 test->settings->blksize, rcvbuf_actual);
-	warning(str);
-	rc = 1;
-    }
+  //   optlen = sizeof(rcvbuf_actual);
+  //   if (getsockopt(s, SOL_SOCKET, SO_RCVBUF, &rcvbuf_actual, &optlen) < 0) {
+	// i_errno = IESETBUF;
+	// return -1;
+  //   }
+  //   if (test->debug) {
+	// printf("RCVBUF is %u, expecting %u\n", rcvbuf_actual, test->settings->socket_bufsize);
+  //   }
+  //   if (test->settings->socket_bufsize && test->settings->socket_bufsize > rcvbuf_actual) {
+	// i_errno = IESETBUF2;
+	// return -1;
+  //   }
+  //   if (test->settings->blksize > rcvbuf_actual) {
+	// char str[80];
+	// snprintf(str, sizeof(str),
+	// 	 "Block size %d > receiving socket buffer size %d",
+	// 	 test->settings->blksize, rcvbuf_actual);
+	// warning(str);
+	// rc = 1;
+  //   }
 
     if (test->json_output) {
 	cJSON_AddNumberToObject(test->json_start, "sock_bufsize", test->settings->socket_bufsize);
-	cJSON_AddNumberToObject(test->json_start, "sndbuf_actual", sndbuf_actual);
-	cJSON_AddNumberToObject(test->json_start, "rcvbuf_actual", rcvbuf_actual);
+	// cJSON_AddNumberToObject(test->json_start, "sndbuf_actual", sndbuf_actual);
+	// cJSON_AddNumberToObject(test->json_start, "rcvbuf_actual", rcvbuf_actual);
     }
 
     return rc;
-- 
2.20.1

